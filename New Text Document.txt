from dotenv import load_dotenv
import streamlit as st
import os
import google.generativeai as genai
from PIL import Image

# Load environment variables
load_dotenv()  # Loading all the environment variables from .env file

# Configure Google Gemini API
genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

# Function to get response from the Gemini API (updated to use gemini-1.5-flash)
def get_gemini_response(image, prompt):
    try:
        model = genai.GenerativeModel('gemini-1.5-flash')  # Use gemini-1.5-flash instead of gemini-pro-vision
        response = model.generate_content([image[0], prompt])
        return response.text  # Assuming the response contains the text
    except Exception as e:
        return f"Error generating response: {str(e)}"

# Function to process uploaded image and prepare for the API
def input_image_setup(uploaded_file):
    try:
        # Checking if a file has been uploaded
        if uploaded_file is not None:
            # Read the file into bytes
            bytes_data = uploaded_file.getvalue()

            # Prepare the image data for API (in the format the API expects)
            image_parts = [
                {
                    "mime_type": uploaded_file.type,  # Get the mime type of the uploaded file
                    "data": bytes_data
                }
            ]
            return image_parts
        else:
            raise ValueError("No file uploaded")  # If no file was uploaded, raise an error
    except Exception as e:
        raise ValueError(f"Error processing image: {str(e)}")

# Initialize Streamlit app configuration
st.set_page_config(page_title="Calorie Tracker App")

# Apply custom styling for the app's background
st.markdown("""
            <style>
            .stApp {
                background-color: #143130;
            }
            </style>
            """, unsafe_allow_html=True)

# Display the app's header
st.header("Calorie Tracker App")

# File uploader for images
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
image = None

# If an image is uploaded, display it
if uploaded_file:
    try:
        image = Image.open(uploaded_file)
        st.image(image, caption="Uploaded Image.", use_column_width=True)
    except Exception as e:
        st.error(f"Error loading image: {str(e)}")

# Input prompt to send to the Gemini API
input_prompt = """
You are an expert nutritionist. Please analyze the food items in the image
and calculate the total calories, also provide the details of each food item with calorie intake
in the following format:

1. Item 1 - number of calories
2. Item 2 - number of calories
----
----
Finally, mention whether the food is healthy or not.
If the food is unhealthy, give suggestions to add or remove food items to make it an overall healthy meal.
"""

# Button to submit the image for analysis
submit = st.button("Tell me the total calories")

# Handle the button click to process the image and get a response from the API
if submit:
    if uploaded_file is not None:
        try:
            # Prepare the image data for API request
            image_data = input_image_setup(uploaded_file)
            
            # Get the response from the Gemini API
            response = get_gemini_response(image_data, input_prompt)
            
            # Display the response text
            st.subheader("The Response is:")
            st.write(response)
        except Exception as e:
            st.error(f"Error: {str(e)}")
    else:
        st.error("Please upload an image first.")
